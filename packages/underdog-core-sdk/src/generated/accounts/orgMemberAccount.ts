/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bool,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type OrgMemberAccount = Account<OrgMemberAccountAccountData>;

export type OrgMemberAccountAccountData = {
  discriminator: Array<number>;
  member: PublicKey;
  org: PublicKey;
  active: boolean;
  bump: number;
};

export type OrgMemberAccountAccountDataArgs = {
  member: PublicKey;
  org: PublicKey;
  active: boolean;
  bump: number;
};

/** @deprecated Use `getOrgMemberAccountAccountDataSerializer()` without any argument instead. */
export function getOrgMemberAccountAccountDataSerializer(
  _context: object
): Serializer<OrgMemberAccountAccountDataArgs, OrgMemberAccountAccountData>;
export function getOrgMemberAccountAccountDataSerializer(): Serializer<
  OrgMemberAccountAccountDataArgs,
  OrgMemberAccountAccountData
>;
export function getOrgMemberAccountAccountDataSerializer(
  _context: object = {}
): Serializer<OrgMemberAccountAccountDataArgs, OrgMemberAccountAccountData> {
  return mapSerializer<
    OrgMemberAccountAccountDataArgs,
    any,
    OrgMemberAccountAccountData
  >(
    struct<OrgMemberAccountAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['member', publicKeySerializer()],
        ['org', publicKeySerializer()],
        ['active', bool()],
        ['bump', u8()],
      ],
      { description: 'OrgMemberAccountAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [89, 69, 116, 185, 162, 24, 253, 6],
    })
  ) as Serializer<OrgMemberAccountAccountDataArgs, OrgMemberAccountAccountData>;
}

/** @deprecated Use `deserializeOrgMemberAccount(rawAccount)` without any context instead. */
export function deserializeOrgMemberAccount(
  context: object,
  rawAccount: RpcAccount
): OrgMemberAccount;
export function deserializeOrgMemberAccount(
  rawAccount: RpcAccount
): OrgMemberAccount;
export function deserializeOrgMemberAccount(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): OrgMemberAccount {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getOrgMemberAccountAccountDataSerializer()
  );
}

export async function fetchOrgMemberAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<OrgMemberAccount> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'OrgMemberAccount');
  return deserializeOrgMemberAccount(maybeAccount);
}

export async function safeFetchOrgMemberAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<OrgMemberAccount | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeOrgMemberAccount(maybeAccount) : null;
}

export async function fetchAllOrgMemberAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<OrgMemberAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'OrgMemberAccount');
    return deserializeOrgMemberAccount(maybeAccount);
  });
}

export async function safeFetchAllOrgMemberAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<OrgMemberAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeOrgMemberAccount(maybeAccount as RpcAccount)
    );
}

export function getOrgMemberAccountGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'underdogCore',
    'updg8JyjrmFE2h3d71p71zRXDR8q4C6Up8dDoeq3LTM'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      member: PublicKey;
      org: PublicKey;
      active: boolean;
      bump: number;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      member: [8, publicKeySerializer()],
      org: [40, publicKeySerializer()],
      active: [72, bool()],
      bump: [73, u8()],
    })
    .deserializeUsing<OrgMemberAccount>((account) =>
      deserializeOrgMemberAccount(account)
    )
    .whereField('discriminator', [89, 69, 116, 185, 162, 24, 253, 6]);
}

export function getOrgMemberAccountSize(): number {
  return 74;
}

export function findOrgMemberAccountPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    orgAccount: PublicKey;

    member: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'underdogCore',
    'updg8JyjrmFE2h3d71p71zRXDR8q4C6Up8dDoeq3LTM'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('member'),
    publicKeySerializer().serialize(seeds.orgAccount),
    publicKeySerializer().serialize(seeds.member),
  ]);
}

export async function fetchOrgMemberAccountFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findOrgMemberAccountPda>[1],
  options?: RpcGetAccountOptions
): Promise<OrgMemberAccount> {
  return fetchOrgMemberAccount(
    context,
    findOrgMemberAccountPda(context, seeds),
    options
  );
}

export async function safeFetchOrgMemberAccountFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findOrgMemberAccountPda>[1],
  options?: RpcGetAccountOptions
): Promise<OrgMemberAccount | null> {
  return safeFetchOrgMemberAccount(
    context,
    findOrgMemberAccountPda(context, seeds),
    options
  );
}

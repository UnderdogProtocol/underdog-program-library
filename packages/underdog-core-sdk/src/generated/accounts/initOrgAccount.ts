/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type InitOrgAccount = Account<InitOrgAccountAccountData>;

export type InitOrgAccountAccountData = {
  discriminator: Array<number>;
  owner: PublicKey;
  maxorg: bigint;
  bump: number;
};

export type InitOrgAccountAccountDataArgs = {
  owner: PublicKey;
  maxorg: number | bigint;
  bump: number;
};

/** @deprecated Use `getInitOrgAccountAccountDataSerializer()` without any argument instead. */
export function getInitOrgAccountAccountDataSerializer(
  _context: object
): Serializer<InitOrgAccountAccountDataArgs, InitOrgAccountAccountData>;
export function getInitOrgAccountAccountDataSerializer(): Serializer<
  InitOrgAccountAccountDataArgs,
  InitOrgAccountAccountData
>;
export function getInitOrgAccountAccountDataSerializer(
  _context: object = {}
): Serializer<InitOrgAccountAccountDataArgs, InitOrgAccountAccountData> {
  return mapSerializer<
    InitOrgAccountAccountDataArgs,
    any,
    InitOrgAccountAccountData
  >(
    struct<InitOrgAccountAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['owner', publicKeySerializer()],
        ['maxorg', u64()],
        ['bump', u8()],
      ],
      { description: 'InitOrgAccountAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [40, 208, 68, 10, 202, 115, 209, 90],
    })
  ) as Serializer<InitOrgAccountAccountDataArgs, InitOrgAccountAccountData>;
}

/** @deprecated Use `deserializeInitOrgAccount(rawAccount)` without any context instead. */
export function deserializeInitOrgAccount(
  context: object,
  rawAccount: RpcAccount
): InitOrgAccount;
export function deserializeInitOrgAccount(
  rawAccount: RpcAccount
): InitOrgAccount;
export function deserializeInitOrgAccount(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): InitOrgAccount {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getInitOrgAccountAccountDataSerializer()
  );
}

export async function fetchInitOrgAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<InitOrgAccount> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'InitOrgAccount');
  return deserializeInitOrgAccount(maybeAccount);
}

export async function safeFetchInitOrgAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<InitOrgAccount | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeInitOrgAccount(maybeAccount) : null;
}

export async function fetchAllInitOrgAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<InitOrgAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'InitOrgAccount');
    return deserializeInitOrgAccount(maybeAccount);
  });
}

export async function safeFetchAllInitOrgAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<InitOrgAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeInitOrgAccount(maybeAccount as RpcAccount)
    );
}

export function getInitOrgAccountGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'underdogCore',
    'updg8JyjrmFE2h3d71p71zRXDR8q4C6Up8dDoeq3LTM'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      owner: PublicKey;
      maxorg: number | bigint;
      bump: number;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      owner: [8, publicKeySerializer()],
      maxorg: [40, u64()],
      bump: [48, u8()],
    })
    .deserializeUsing<InitOrgAccount>((account) =>
      deserializeInitOrgAccount(account)
    )
    .whereField('discriminator', [40, 208, 68, 10, 202, 115, 209, 90]);
}

export function getInitOrgAccountSize(): number {
  return 49;
}

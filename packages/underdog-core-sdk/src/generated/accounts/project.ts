/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type Project = Account<ProjectAccountData>;

export type ProjectAccountData = {
  discriminator: Array<number>;
  superAdminAddress: PublicKey;
  orgAddress: PublicKey;
  projectId: bigint;
  bump: number;
};

export type ProjectAccountDataArgs = {
  superAdminAddress: PublicKey;
  orgAddress: PublicKey;
  projectId: number | bigint;
  bump: number;
};

/** @deprecated Use `getProjectAccountDataSerializer()` without any argument instead. */
export function getProjectAccountDataSerializer(
  _context: object
): Serializer<ProjectAccountDataArgs, ProjectAccountData>;
export function getProjectAccountDataSerializer(): Serializer<
  ProjectAccountDataArgs,
  ProjectAccountData
>;
export function getProjectAccountDataSerializer(
  _context: object = {}
): Serializer<ProjectAccountDataArgs, ProjectAccountData> {
  return mapSerializer<ProjectAccountDataArgs, any, ProjectAccountData>(
    struct<ProjectAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['superAdminAddress', publicKeySerializer()],
        ['orgAddress', publicKeySerializer()],
        ['projectId', u64()],
        ['bump', u8()],
      ],
      { description: 'ProjectAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [205, 168, 189, 202, 181, 247, 142, 19],
    })
  ) as Serializer<ProjectAccountDataArgs, ProjectAccountData>;
}

/** @deprecated Use `deserializeProject(rawAccount)` without any context instead. */
export function deserializeProject(
  context: object,
  rawAccount: RpcAccount
): Project;
export function deserializeProject(rawAccount: RpcAccount): Project;
export function deserializeProject(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): Project {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getProjectAccountDataSerializer()
  );
}

export async function fetchProject(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Project> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Project');
  return deserializeProject(maybeAccount);
}

export async function safeFetchProject(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Project | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeProject(maybeAccount) : null;
}

export async function fetchAllProject(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Project[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Project');
    return deserializeProject(maybeAccount);
  });
}

export async function safeFetchAllProject(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Project[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeProject(maybeAccount as RpcAccount));
}

export function getProjectGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'underdogCore',
    'updg8JyjrmFE2h3d71p71zRXDR8q4C6Up8dDoeq3LTM'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      superAdminAddress: PublicKey;
      orgAddress: PublicKey;
      projectId: number | bigint;
      bump: number;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      superAdminAddress: [8, publicKeySerializer()],
      orgAddress: [40, publicKeySerializer()],
      projectId: [72, u64()],
      bump: [80, u8()],
    })
    .deserializeUsing<Project>((account) => deserializeProject(account))
    .whereField('discriminator', [205, 168, 189, 202, 181, 247, 142, 19]);
}

export function getProjectSize(): number {
  return 81;
}

export function findProjectPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    prefix: string;

    orgAccount: PublicKey;

    projectId: number | bigint;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'underdogCore',
    'updg8JyjrmFE2h3d71p71zRXDR8q4C6Up8dDoeq3LTM'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize(seeds.prefix),
    publicKeySerializer().serialize(seeds.orgAccount),
    u64().serialize(seeds.projectId),
  ]);
}

export async function fetchProjectFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findProjectPda>[1],
  options?: RpcGetAccountOptions
): Promise<Project> {
  return fetchProject(context, findProjectPda(context, seeds), options);
}

export async function safeFetchProjectFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findProjectPda>[1],
  options?: RpcGetAccountOptions
): Promise<Project | null> {
  return safeFetchProject(context, findProjectPda(context, seeds), options);
}

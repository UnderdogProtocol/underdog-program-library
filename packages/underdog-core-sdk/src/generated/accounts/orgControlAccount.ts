/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type OrgControlAccount = Account<OrgControlAccountAccountData>;

export type OrgControlAccountAccountData = {
  discriminator: Array<number>;
  orgControl: PublicKey;
  bump: number;
};

export type OrgControlAccountAccountDataArgs = {
  orgControl: PublicKey;
  bump: number;
};

/** @deprecated Use `getOrgControlAccountAccountDataSerializer()` without any argument instead. */
export function getOrgControlAccountAccountDataSerializer(
  _context: object
): Serializer<OrgControlAccountAccountDataArgs, OrgControlAccountAccountData>;
export function getOrgControlAccountAccountDataSerializer(): Serializer<
  OrgControlAccountAccountDataArgs,
  OrgControlAccountAccountData
>;
export function getOrgControlAccountAccountDataSerializer(
  _context: object = {}
): Serializer<OrgControlAccountAccountDataArgs, OrgControlAccountAccountData> {
  return mapSerializer<
    OrgControlAccountAccountDataArgs,
    any,
    OrgControlAccountAccountData
  >(
    struct<OrgControlAccountAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['orgControl', publicKeySerializer()],
        ['bump', u8()],
      ],
      { description: 'OrgControlAccountAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [17, 204, 242, 247, 202, 204, 211, 154],
    })
  ) as Serializer<
    OrgControlAccountAccountDataArgs,
    OrgControlAccountAccountData
  >;
}

/** @deprecated Use `deserializeOrgControlAccount(rawAccount)` without any context instead. */
export function deserializeOrgControlAccount(
  context: object,
  rawAccount: RpcAccount
): OrgControlAccount;
export function deserializeOrgControlAccount(
  rawAccount: RpcAccount
): OrgControlAccount;
export function deserializeOrgControlAccount(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): OrgControlAccount {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getOrgControlAccountAccountDataSerializer()
  );
}

export async function fetchOrgControlAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<OrgControlAccount> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'OrgControlAccount');
  return deserializeOrgControlAccount(maybeAccount);
}

export async function safeFetchOrgControlAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<OrgControlAccount | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists
    ? deserializeOrgControlAccount(maybeAccount)
    : null;
}

export async function fetchAllOrgControlAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<OrgControlAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'OrgControlAccount');
    return deserializeOrgControlAccount(maybeAccount);
  });
}

export async function safeFetchAllOrgControlAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<OrgControlAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeOrgControlAccount(maybeAccount as RpcAccount)
    );
}

export function getOrgControlAccountGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'underdogCore',
    'updg8JyjrmFE2h3d71p71zRXDR8q4C6Up8dDoeq3LTM'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      orgControl: PublicKey;
      bump: number;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      orgControl: [8, publicKeySerializer()],
      bump: [40, u8()],
    })
    .deserializeUsing<OrgControlAccount>((account) =>
      deserializeOrgControlAccount(account)
    )
    .whereField('discriminator', [17, 204, 242, 247, 202, 204, 211, 154]);
}

export function getOrgControlAccountSize(): number {
  return 41;
}

export function findOrgControlAccountPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    superAdminAddress: PublicKey;

    orgId: string;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'underdogCore',
    'updg8JyjrmFE2h3d71p71zRXDR8q4C6Up8dDoeq3LTM'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('org-control'),
    publicKeySerializer().serialize(seeds.superAdminAddress),
    string({ size: 'variable' }).serialize(seeds.orgId),
  ]);
}

export async function fetchOrgControlAccountFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findOrgControlAccountPda>[1],
  options?: RpcGetAccountOptions
): Promise<OrgControlAccount> {
  return fetchOrgControlAccount(
    context,
    findOrgControlAccountPda(context, seeds),
    options
  );
}

export async function safeFetchOrgControlAccountFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findOrgControlAccountPda>[1],
  options?: RpcGetAccountOptions
): Promise<OrgControlAccount | null> {
  return safeFetchOrgControlAccount(
    context,
    findOrgControlAccountPda(context, seeds),
    options
  );
}

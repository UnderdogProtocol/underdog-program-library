/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type CompressedProject = Account<CompressedProjectAccountData>;

export type CompressedProjectAccountData = {
  discriminator: Array<number>;
  superAdminAddress: PublicKey;
  orgAddress: PublicKey;
  merkleTree: PublicKey;
  projectId: bigint;
  bump: number;
};

export type CompressedProjectAccountDataArgs = {
  superAdminAddress: PublicKey;
  orgAddress: PublicKey;
  merkleTree: PublicKey;
  projectId: number | bigint;
  bump: number;
};

/** @deprecated Use `getCompressedProjectAccountDataSerializer()` without any argument instead. */
export function getCompressedProjectAccountDataSerializer(
  _context: object
): Serializer<CompressedProjectAccountDataArgs, CompressedProjectAccountData>;
export function getCompressedProjectAccountDataSerializer(): Serializer<
  CompressedProjectAccountDataArgs,
  CompressedProjectAccountData
>;
export function getCompressedProjectAccountDataSerializer(
  _context: object = {}
): Serializer<CompressedProjectAccountDataArgs, CompressedProjectAccountData> {
  return mapSerializer<
    CompressedProjectAccountDataArgs,
    any,
    CompressedProjectAccountData
  >(
    struct<CompressedProjectAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['superAdminAddress', publicKeySerializer()],
        ['orgAddress', publicKeySerializer()],
        ['merkleTree', publicKeySerializer()],
        ['projectId', u64()],
        ['bump', u8()],
      ],
      { description: 'CompressedProjectAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [226, 119, 48, 216, 137, 162, 12, 73],
    })
  ) as Serializer<
    CompressedProjectAccountDataArgs,
    CompressedProjectAccountData
  >;
}

/** @deprecated Use `deserializeCompressedProject(rawAccount)` without any context instead. */
export function deserializeCompressedProject(
  context: object,
  rawAccount: RpcAccount
): CompressedProject;
export function deserializeCompressedProject(
  rawAccount: RpcAccount
): CompressedProject;
export function deserializeCompressedProject(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): CompressedProject {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getCompressedProjectAccountDataSerializer()
  );
}

export async function fetchCompressedProject(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<CompressedProject> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'CompressedProject');
  return deserializeCompressedProject(maybeAccount);
}

export async function safeFetchCompressedProject(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<CompressedProject | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists
    ? deserializeCompressedProject(maybeAccount)
    : null;
}

export async function fetchAllCompressedProject(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<CompressedProject[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'CompressedProject');
    return deserializeCompressedProject(maybeAccount);
  });
}

export async function safeFetchAllCompressedProject(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<CompressedProject[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeCompressedProject(maybeAccount as RpcAccount)
    );
}

export function getCompressedProjectGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'underdogCore',
    'updg8JyjrmFE2h3d71p71zRXDR8q4C6Up8dDoeq3LTM'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      superAdminAddress: PublicKey;
      orgAddress: PublicKey;
      merkleTree: PublicKey;
      projectId: number | bigint;
      bump: number;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      superAdminAddress: [8, publicKeySerializer()],
      orgAddress: [40, publicKeySerializer()],
      merkleTree: [72, publicKeySerializer()],
      projectId: [104, u64()],
      bump: [112, u8()],
    })
    .deserializeUsing<CompressedProject>((account) =>
      deserializeCompressedProject(account)
    )
    .whereField('discriminator', [226, 119, 48, 216, 137, 162, 12, 73]);
}

export function getCompressedProjectSize(): number {
  return 113;
}

export function findCompressedProjectPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    orgAccount: PublicKey;

    projectId: string;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'underdogCore',
    'updg8JyjrmFE2h3d71p71zRXDR8q4C6Up8dDoeq3LTM'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('c-proj'),
    publicKeySerializer().serialize(seeds.orgAccount),
    string({ size: 'variable' }).serialize(seeds.projectId),
  ]);
}

export async function fetchCompressedProjectFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findCompressedProjectPda>[1],
  options?: RpcGetAccountOptions
): Promise<CompressedProject> {
  return fetchCompressedProject(
    context,
    findCompressedProjectPda(context, seeds),
    options
  );
}

export async function safeFetchCompressedProjectFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findCompressedProjectPda>[1],
  options?: RpcGetAccountOptions
): Promise<CompressedProject | null> {
  return safeFetchCompressedProject(
    context,
    findCompressedProjectPda(context, seeds),
    options
  );
}

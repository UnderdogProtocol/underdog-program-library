/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bool,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type MintNftV4InstructionAccounts = {
  authority?: Signer;
  ownerAccount: PublicKey | Pda;
  orgAccount: PublicKey | Pda;
  projectAccount: PublicKey | Pda;
  collectionMint: PublicKey | Pda;
  collectionMetadata: PublicKey | Pda;
  collectionMasterEdition: PublicKey | Pda;
  recipient: PublicKey | Pda;
  treeAuthority: PublicKey | Pda;
  merkleTree: PublicKey | Pda;
  bubblegumSigner: PublicKey | Pda;
  tokenMetadataProgram?: PublicKey | Pda;
  logWrapper: PublicKey | Pda;
  bubblegumProgram: PublicKey | Pda;
  compressionProgram: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type MintNftV4InstructionData = {
  discriminator: Array<number>;
  superAdminAddress: PublicKey;
  orgId: string;
  projectId: bigint;
  name: string;
  symbol: string;
  uri: string;
  isDelegated: Option<boolean>;
};

export type MintNftV4InstructionDataArgs = {
  superAdminAddress: PublicKey;
  orgId: string;
  projectId: number | bigint;
  name: string;
  symbol: string;
  uri: string;
  isDelegated: OptionOrNullable<boolean>;
};

/** @deprecated Use `getMintNftV4InstructionDataSerializer()` without any argument instead. */
export function getMintNftV4InstructionDataSerializer(
  _context: object
): Serializer<MintNftV4InstructionDataArgs, MintNftV4InstructionData>;
export function getMintNftV4InstructionDataSerializer(): Serializer<
  MintNftV4InstructionDataArgs,
  MintNftV4InstructionData
>;
export function getMintNftV4InstructionDataSerializer(
  _context: object = {}
): Serializer<MintNftV4InstructionDataArgs, MintNftV4InstructionData> {
  return mapSerializer<
    MintNftV4InstructionDataArgs,
    any,
    MintNftV4InstructionData
  >(
    struct<MintNftV4InstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['superAdminAddress', publicKeySerializer()],
        ['orgId', string()],
        ['projectId', u64()],
        ['name', string()],
        ['symbol', string()],
        ['uri', string()],
        ['isDelegated', option(bool())],
      ],
      { description: 'MintNftV4InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [251, 26, 56, 183, 145, 1, 143, 196],
    })
  ) as Serializer<MintNftV4InstructionDataArgs, MintNftV4InstructionData>;
}

// Args.
export type MintNftV4InstructionArgs = MintNftV4InstructionDataArgs;

// Instruction.
export function mintNftV4(
  context: Pick<Context, 'programs' | 'identity'>,
  input: MintNftV4InstructionAccounts & MintNftV4InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'underdogCore',
    'updg8JyjrmFE2h3d71p71zRXDR8q4C6Up8dDoeq3LTM'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    ownerAccount: [input.ownerAccount, false] as const,
    orgAccount: [input.orgAccount, false] as const,
    projectAccount: [input.projectAccount, false] as const,
    collectionMint: [input.collectionMint, true] as const,
    collectionMetadata: [input.collectionMetadata, true] as const,
    collectionMasterEdition: [input.collectionMasterEdition, false] as const,
    recipient: [input.recipient, false] as const,
    treeAuthority: [input.treeAuthority, true] as const,
    merkleTree: [input.merkleTree, true] as const,
    bubblegumSigner: [input.bubblegumSigner, false] as const,
    logWrapper: [input.logWrapper, false] as const,
    bubblegumProgram: [input.bubblegumProgram, false] as const,
    compressionProgram: [input.compressionProgram, false] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, true] as const)
      : ([context.identity, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenMetadataProgram',
    input.tokenMetadataProgram
      ? ([input.tokenMetadataProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'mplTokenMetadata',
            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.authority, false);
  addAccountMeta(keys, signers, resolvedAccounts.ownerAccount, false);
  addAccountMeta(keys, signers, resolvedAccounts.orgAccount, false);
  addAccountMeta(keys, signers, resolvedAccounts.projectAccount, false);
  addAccountMeta(keys, signers, resolvedAccounts.collectionMint, false);
  addAccountMeta(keys, signers, resolvedAccounts.collectionMetadata, false);
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.collectionMasterEdition,
    false
  );
  addAccountMeta(keys, signers, resolvedAccounts.recipient, false);
  addAccountMeta(keys, signers, resolvedAccounts.treeAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.merkleTree, false);
  addAccountMeta(keys, signers, resolvedAccounts.bubblegumSigner, false);
  addAccountMeta(keys, signers, resolvedAccounts.tokenMetadataProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.logWrapper, false);
  addAccountMeta(keys, signers, resolvedAccounts.bubblegumProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.compressionProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);

  // Data.
  const data = getMintNftV4InstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}

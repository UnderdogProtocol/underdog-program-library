/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';
import {
  UpdateMetadataArgs,
  UpdateMetadataArgsArgs,
  getUpdateMetadataArgsSerializer,
} from '../types';

// Accounts.
export type UpdateProjectV2InstructionAccounts = {
  authority?: Signer;
  ownerAccount: PublicKey | Pda;
  orgAccount: PublicKey | Pda;
  projectAccount: PublicKey | Pda;
  collectionMint: PublicKey | Pda;
  collectionMetadata: PublicKey | Pda;
  tokenMetadataProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type UpdateProjectV2InstructionData = {
  discriminator: Array<number>;
  superAdminAddress: PublicKey;
  orgId: string;
  projectId: bigint;
  metadata: UpdateMetadataArgs;
};

export type UpdateProjectV2InstructionDataArgs = {
  superAdminAddress: PublicKey;
  orgId: string;
  projectId: number | bigint;
  metadata: UpdateMetadataArgsArgs;
};

/** @deprecated Use `getUpdateProjectV2InstructionDataSerializer()` without any argument instead. */
export function getUpdateProjectV2InstructionDataSerializer(
  _context: object
): Serializer<
  UpdateProjectV2InstructionDataArgs,
  UpdateProjectV2InstructionData
>;
export function getUpdateProjectV2InstructionDataSerializer(): Serializer<
  UpdateProjectV2InstructionDataArgs,
  UpdateProjectV2InstructionData
>;
export function getUpdateProjectV2InstructionDataSerializer(
  _context: object = {}
): Serializer<
  UpdateProjectV2InstructionDataArgs,
  UpdateProjectV2InstructionData
> {
  return mapSerializer<
    UpdateProjectV2InstructionDataArgs,
    any,
    UpdateProjectV2InstructionData
  >(
    struct<UpdateProjectV2InstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['superAdminAddress', publicKeySerializer()],
        ['orgId', string()],
        ['projectId', u64()],
        ['metadata', getUpdateMetadataArgsSerializer()],
      ],
      { description: 'UpdateProjectV2InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [191, 112, 28, 148, 218, 214, 20, 72],
    })
  ) as Serializer<
    UpdateProjectV2InstructionDataArgs,
    UpdateProjectV2InstructionData
  >;
}

// Args.
export type UpdateProjectV2InstructionArgs = UpdateProjectV2InstructionDataArgs;

// Instruction.
export function updateProjectV2(
  context: Pick<Context, 'programs' | 'identity'>,
  input: UpdateProjectV2InstructionAccounts & UpdateProjectV2InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'underdogCore',
    'updg8JyjrmFE2h3d71p71zRXDR8q4C6Up8dDoeq3LTM'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    ownerAccount: [input.ownerAccount, false] as const,
    orgAccount: [input.orgAccount, false] as const,
    projectAccount: [input.projectAccount, false] as const,
    collectionMint: [input.collectionMint, false] as const,
    collectionMetadata: [input.collectionMetadata, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, false] as const)
      : ([context.identity, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenMetadataProgram',
    input.tokenMetadataProgram
      ? ([input.tokenMetadataProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'mplTokenMetadata',
            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.authority, false);
  addAccountMeta(keys, signers, resolvedAccounts.ownerAccount, false);
  addAccountMeta(keys, signers, resolvedAccounts.orgAccount, false);
  addAccountMeta(keys, signers, resolvedAccounts.projectAccount, false);
  addAccountMeta(keys, signers, resolvedAccounts.collectionMint, false);
  addAccountMeta(keys, signers, resolvedAccounts.collectionMetadata, false);
  addAccountMeta(keys, signers, resolvedAccounts.tokenMetadataProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);

  // Data.
  const data =
    getUpdateProjectV2InstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}

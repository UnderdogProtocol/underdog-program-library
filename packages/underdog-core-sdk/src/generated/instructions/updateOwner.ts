/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findInitialOwnerPda } from '../accounts';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type UpdateOwnerInstructionAccounts = {
  authority?: Signer;
  ownerAccount?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type UpdateOwnerInstructionData = {
  discriminator: Array<number>;
  newOwner: PublicKey;
};

export type UpdateOwnerInstructionDataArgs = { newOwner: PublicKey };

/** @deprecated Use `getUpdateOwnerInstructionDataSerializer()` without any argument instead. */
export function getUpdateOwnerInstructionDataSerializer(
  _context: object
): Serializer<UpdateOwnerInstructionDataArgs, UpdateOwnerInstructionData>;
export function getUpdateOwnerInstructionDataSerializer(): Serializer<
  UpdateOwnerInstructionDataArgs,
  UpdateOwnerInstructionData
>;
export function getUpdateOwnerInstructionDataSerializer(
  _context: object = {}
): Serializer<UpdateOwnerInstructionDataArgs, UpdateOwnerInstructionData> {
  return mapSerializer<
    UpdateOwnerInstructionDataArgs,
    any,
    UpdateOwnerInstructionData
  >(
    struct<UpdateOwnerInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['newOwner', publicKeySerializer()],
      ],
      { description: 'UpdateOwnerInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [164, 188, 124, 254, 132, 26, 198, 178],
    })
  ) as Serializer<UpdateOwnerInstructionDataArgs, UpdateOwnerInstructionData>;
}

// Args.
export type UpdateOwnerInstructionArgs = UpdateOwnerInstructionDataArgs;

// Instruction.
export function updateOwner(
  context: Pick<Context, 'programs' | 'eddsa' | 'identity'>,
  input: UpdateOwnerInstructionAccounts & UpdateOwnerInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'underdogCore',
    'updg8JyjrmFE2h3d71p71zRXDR8q4C6Up8dDoeq3LTM'
  );

  // Resolved inputs.
  const resolvedAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, true] as const)
      : ([context.identity, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'ownerAccount',
    input.ownerAccount
      ? ([input.ownerAccount, true] as const)
      : ([findInitialOwnerPda(context), true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.authority, false);
  addAccountMeta(keys, signers, resolvedAccounts.ownerAccount, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);

  // Data.
  const data =
    getUpdateOwnerInstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}

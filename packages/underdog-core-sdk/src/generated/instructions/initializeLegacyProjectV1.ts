/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  findMasterEditionPda,
  findMetadataPda,
} from '@metaplex-foundation/mpl-token-metadata';
import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  resolveProjectMintPrefix,
  resolveProjectPrefix,
  resolveProjectVaultPrefix,
} from '../../resolvers';
import {
  findInitialOwnerPda,
  findLegacyProjectPda,
  findOrgAccountPda,
} from '../accounts';
import { PickPartial, addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type InitializeLegacyProjectV1InstructionAccounts = {
  authority?: Signer;
  ownerAccount?: PublicKey | Pda;
  orgAccount?: PublicKey | Pda;
  legacyProject?: PublicKey | Pda;
  legacyProjectMint?: PublicKey | Pda;
  legacyProjectVault?: PublicKey | Pda;
  legacyProjectMetadata?: PublicKey | Pda;
  legacyProjectMasterEdition?: PublicKey | Pda;
  tokenMetadataProgram?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  rent?: PublicKey | Pda;
};

// Data.
export type InitializeLegacyProjectV1InstructionData = {
  discriminator: Array<number>;
  superAdminAddress: PublicKey;
  orgId: string;
  projectIdStr: string;
  projectType: string;
  projectPrefix: string;
  projectMintPrefix: string;
  projectVaultPrefix: string;
  name: string;
  symbol: string;
  uri: string;
};

export type InitializeLegacyProjectV1InstructionDataArgs = {
  superAdminAddress: PublicKey;
  orgId: string;
  projectIdStr: string;
  projectType: string;
  projectPrefix: string;
  projectMintPrefix: string;
  projectVaultPrefix: string;
  name: string;
  symbol: string;
  uri: string;
};

/** @deprecated Use `getInitializeLegacyProjectV1InstructionDataSerializer()` without any argument instead. */
export function getInitializeLegacyProjectV1InstructionDataSerializer(
  _context: object
): Serializer<
  InitializeLegacyProjectV1InstructionDataArgs,
  InitializeLegacyProjectV1InstructionData
>;
export function getInitializeLegacyProjectV1InstructionDataSerializer(): Serializer<
  InitializeLegacyProjectV1InstructionDataArgs,
  InitializeLegacyProjectV1InstructionData
>;
export function getInitializeLegacyProjectV1InstructionDataSerializer(
  _context: object = {}
): Serializer<
  InitializeLegacyProjectV1InstructionDataArgs,
  InitializeLegacyProjectV1InstructionData
> {
  return mapSerializer<
    InitializeLegacyProjectV1InstructionDataArgs,
    any,
    InitializeLegacyProjectV1InstructionData
  >(
    struct<InitializeLegacyProjectV1InstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['superAdminAddress', publicKeySerializer()],
        ['orgId', string()],
        ['projectIdStr', string()],
        ['projectType', string()],
        ['projectPrefix', string()],
        ['projectMintPrefix', string()],
        ['projectVaultPrefix', string()],
        ['name', string()],
        ['symbol', string()],
        ['uri', string()],
      ],
      { description: 'InitializeLegacyProjectV1InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [249, 214, 25, 217, 96, 161, 222, 157],
    })
  ) as Serializer<
    InitializeLegacyProjectV1InstructionDataArgs,
    InitializeLegacyProjectV1InstructionData
  >;
}

// Args.
export type InitializeLegacyProjectV1InstructionArgs = PickPartial<
  InitializeLegacyProjectV1InstructionDataArgs,
  'projectPrefix' | 'projectMintPrefix' | 'projectVaultPrefix'
>;

// Instruction.
export function initializeLegacyProjectV1(
  context: Pick<Context, 'programs' | 'eddsa' | 'identity' | 'payer'>,
  input: InitializeLegacyProjectV1InstructionAccounts &
    InitializeLegacyProjectV1InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'underdogCore',
    'updg8JyjrmFE2h3d71p71zRXDR8q4C6Up8dDoeq3LTM'
  );

  // Resolved inputs.
  const resolvedAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, true] as const)
      : ([context.identity, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'ownerAccount',
    input.ownerAccount
      ? ([input.ownerAccount, false] as const)
      : ([findInitialOwnerPda(context), false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'orgAccount',
    input.orgAccount
      ? ([input.orgAccount, true] as const)
      : ([
          findOrgAccountPda(context, {
            superAdminAddress: input.superAdminAddress,
            orgId: input.orgId,
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvingArgs,
    'projectPrefix',
    input.projectPrefix ??
      resolveProjectPrefix(
        context,
        { ...input, ...resolvedAccounts },
        { ...input, ...resolvingArgs },
        programId,
        false
      )
  );
  addObjectProperty(
    resolvedAccounts,
    'legacyProject',
    input.legacyProject
      ? ([input.legacyProject, true] as const)
      : ([
          findLegacyProjectPda(context, {
            type: resolvingArgs.projectPrefix,
            orgAccount: publicKey(resolvedAccounts.orgAccount[0], false),
            projectId: input.projectIdStr,
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvingArgs,
    'projectMintPrefix',
    input.projectMintPrefix ??
      resolveProjectMintPrefix(
        context,
        { ...input, ...resolvedAccounts },
        { ...input, ...resolvingArgs },
        programId,
        false
      )
  );
  addObjectProperty(
    resolvedAccounts,
    'legacyProjectMint',
    input.legacyProjectMint
      ? ([input.legacyProjectMint, true] as const)
      : ([
          findLegacyProjectPda(context, {
            type: resolvingArgs.projectMintPrefix,
            orgAccount: publicKey(resolvedAccounts.orgAccount[0], false),
            projectId: input.projectIdStr,
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvingArgs,
    'projectVaultPrefix',
    input.projectVaultPrefix ??
      resolveProjectVaultPrefix(
        context,
        { ...input, ...resolvedAccounts },
        { ...input, ...resolvingArgs },
        programId,
        false
      )
  );
  addObjectProperty(
    resolvedAccounts,
    'legacyProjectVault',
    input.legacyProjectVault
      ? ([input.legacyProjectVault, true] as const)
      : ([
          findLegacyProjectPda(context, {
            type: resolvingArgs.projectVaultPrefix,
            orgAccount: publicKey(resolvedAccounts.orgAccount[0], false),
            projectId: input.projectIdStr,
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'legacyProjectMetadata',
    input.legacyProjectMetadata
      ? ([input.legacyProjectMetadata, true] as const)
      : ([
          findMetadataPda(context, {
            mint: publicKey(resolvedAccounts.legacyProjectMint[0], false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'legacyProjectMasterEdition',
    input.legacyProjectMasterEdition
      ? ([input.legacyProjectMasterEdition, true] as const)
      : ([
          findMasterEditionPda(context, {
            mint: publicKey(resolvedAccounts.legacyProjectMint[0], false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenMetadataProgram',
    input.tokenMetadataProgram
      ? ([input.tokenMetadataProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'mplTokenMetadata',
            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenProgram',
    input.tokenProgram
      ? ([input.tokenProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splToken',
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'rent',
    input.rent
      ? ([input.rent, false] as const)
      : ([
          publicKey('SysvarRent111111111111111111111111111111111'),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.authority, false);
  addAccountMeta(keys, signers, resolvedAccounts.ownerAccount, false);
  addAccountMeta(keys, signers, resolvedAccounts.orgAccount, false);
  addAccountMeta(keys, signers, resolvedAccounts.legacyProject, false);
  addAccountMeta(keys, signers, resolvedAccounts.legacyProjectMint, false);
  addAccountMeta(keys, signers, resolvedAccounts.legacyProjectVault, false);
  addAccountMeta(keys, signers, resolvedAccounts.legacyProjectMetadata, false);
  addAccountMeta(
    keys,
    signers,
    resolvedAccounts.legacyProjectMasterEdition,
    false
  );
  addAccountMeta(keys, signers, resolvedAccounts.tokenMetadataProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.tokenProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.rent, false);

  // Data.
  const data =
    getInitializeLegacyProjectV1InstructionDataSerializer().serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}

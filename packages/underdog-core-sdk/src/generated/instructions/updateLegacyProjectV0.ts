/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { findMetadataPda } from '@metaplex-foundation/mpl-token-metadata';
import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  resolveProjectMintPrefix,
  resolveProjectPrefix,
} from '../../resolvers';
import {
  findInitialOwnerPda,
  findLegacyProjectPda,
  findOrgAccountPda,
} from '../accounts';
import { PickPartial, addAccountMeta, addObjectProperty } from '../shared';
import {
  UpdateMetadataArgs,
  UpdateMetadataArgsArgs,
  getUpdateMetadataArgsSerializer,
} from '../types';

// Accounts.
export type UpdateLegacyProjectV0InstructionAccounts = {
  authority?: Signer;
  ownerAccount?: PublicKey | Pda;
  orgAccount?: PublicKey | Pda;
  legacyProject?: PublicKey | Pda;
  legacyProjectMint?: PublicKey | Pda;
  legacyProjectMetadata?: PublicKey | Pda;
  tokenMetadataProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type UpdateLegacyProjectV0InstructionData = {
  discriminator: Array<number>;
  superAdminAddress: PublicKey;
  orgId: string;
  projectIdStr: string;
  projectType: string;
  projectPrefix: string;
  projectMintPrefix: string;
  metadata: UpdateMetadataArgs;
};

export type UpdateLegacyProjectV0InstructionDataArgs = {
  superAdminAddress: PublicKey;
  orgId: string;
  projectIdStr: string;
  projectType: string;
  projectPrefix: string;
  projectMintPrefix: string;
  metadata: UpdateMetadataArgsArgs;
};

/** @deprecated Use `getUpdateLegacyProjectV0InstructionDataSerializer()` without any argument instead. */
export function getUpdateLegacyProjectV0InstructionDataSerializer(
  _context: object
): Serializer<
  UpdateLegacyProjectV0InstructionDataArgs,
  UpdateLegacyProjectV0InstructionData
>;
export function getUpdateLegacyProjectV0InstructionDataSerializer(): Serializer<
  UpdateLegacyProjectV0InstructionDataArgs,
  UpdateLegacyProjectV0InstructionData
>;
export function getUpdateLegacyProjectV0InstructionDataSerializer(
  _context: object = {}
): Serializer<
  UpdateLegacyProjectV0InstructionDataArgs,
  UpdateLegacyProjectV0InstructionData
> {
  return mapSerializer<
    UpdateLegacyProjectV0InstructionDataArgs,
    any,
    UpdateLegacyProjectV0InstructionData
  >(
    struct<UpdateLegacyProjectV0InstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['superAdminAddress', publicKeySerializer()],
        ['orgId', string()],
        ['projectIdStr', string()],
        ['projectType', string()],
        ['projectPrefix', string()],
        ['projectMintPrefix', string()],
        ['metadata', getUpdateMetadataArgsSerializer()],
      ],
      { description: 'UpdateLegacyProjectV0InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [168, 130, 254, 72, 246, 75, 31, 236],
    })
  ) as Serializer<
    UpdateLegacyProjectV0InstructionDataArgs,
    UpdateLegacyProjectV0InstructionData
  >;
}

// Args.
export type UpdateLegacyProjectV0InstructionArgs = PickPartial<
  UpdateLegacyProjectV0InstructionDataArgs,
  'projectPrefix' | 'projectMintPrefix'
>;

// Instruction.
export function updateLegacyProjectV0(
  context: Pick<Context, 'programs' | 'eddsa' | 'identity' | 'payer'>,
  input: UpdateLegacyProjectV0InstructionAccounts &
    UpdateLegacyProjectV0InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'underdogCore',
    'updg8JyjrmFE2h3d71p71zRXDR8q4C6Up8dDoeq3LTM'
  );

  // Resolved inputs.
  const resolvedAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, false] as const)
      : ([context.identity, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'ownerAccount',
    input.ownerAccount
      ? ([input.ownerAccount, false] as const)
      : ([findInitialOwnerPda(context), false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'orgAccount',
    input.orgAccount
      ? ([input.orgAccount, false] as const)
      : ([
          findOrgAccountPda(context, {
            superAdminAddress: input.superAdminAddress,
            orgId: input.orgId,
          }),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvingArgs,
    'projectPrefix',
    input.projectPrefix ??
      resolveProjectPrefix(
        context,
        { ...input, ...resolvedAccounts },
        { ...input, ...resolvingArgs },
        programId,
        false
      )
  );
  addObjectProperty(
    resolvedAccounts,
    'legacyProject',
    input.legacyProject
      ? ([input.legacyProject, false] as const)
      : ([
          findLegacyProjectPda(context, {
            type: resolvingArgs.projectPrefix,
            orgAccount: publicKey(resolvedAccounts.orgAccount[0], false),
            projectId: input.projectIdStr,
          }),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvingArgs,
    'projectMintPrefix',
    input.projectMintPrefix ??
      resolveProjectMintPrefix(
        context,
        { ...input, ...resolvedAccounts },
        { ...input, ...resolvingArgs },
        programId,
        false
      )
  );
  addObjectProperty(
    resolvedAccounts,
    'legacyProjectMint',
    input.legacyProjectMint
      ? ([input.legacyProjectMint, false] as const)
      : ([
          findLegacyProjectPda(context, {
            type: resolvingArgs.projectMintPrefix,
            orgAccount: publicKey(resolvedAccounts.orgAccount[0], false),
            projectId: input.projectIdStr,
          }),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'legacyProjectMetadata',
    input.legacyProjectMetadata
      ? ([input.legacyProjectMetadata, true] as const)
      : ([
          findMetadataPda(context, {
            mint: publicKey(resolvedAccounts.legacyProjectMint[0], false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'tokenMetadataProgram',
    input.tokenMetadataProgram
      ? ([input.tokenMetadataProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'mplTokenMetadata',
            'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.authority, false);
  addAccountMeta(keys, signers, resolvedAccounts.ownerAccount, false);
  addAccountMeta(keys, signers, resolvedAccounts.orgAccount, false);
  addAccountMeta(keys, signers, resolvedAccounts.legacyProject, false);
  addAccountMeta(keys, signers, resolvedAccounts.legacyProjectMint, false);
  addAccountMeta(keys, signers, resolvedAccounts.legacyProjectMetadata, false);
  addAccountMeta(keys, signers, resolvedAccounts.tokenMetadataProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);

  // Data.
  const data =
    getUpdateLegacyProjectV0InstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}

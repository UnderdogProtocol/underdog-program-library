/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { findTreeConfigPda } from '@metaplex-foundation/mpl-bubblegum';
import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  string,
  struct,
  u32,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findLinkPda } from '../accounts';
import { PickPartial, addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type BurnAssetV0InstructionAccounts = {
  authority?: Signer;
  link?: PublicKey | Pda;
  treeAuthority?: PublicKey | Pda;
  merkleTree: PublicKey | Pda;
  bubblegumSigner?: PublicKey | Pda;
  bubblegumProgram?: PublicKey | Pda;
  logWrapper?: PublicKey | Pda;
  compressionProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type BurnAssetV0InstructionData = {
  discriminator: Array<number>;
  root: Uint8Array;
  dataHash: Uint8Array;
  creatorHash: Uint8Array;
  leafIndex: number;
  namespace: string;
  identifier: string;
};

export type BurnAssetV0InstructionDataArgs = {
  root: Uint8Array;
  dataHash: Uint8Array;
  creatorHash: Uint8Array;
  leafIndex: number;
  namespace: string;
  identifier: string;
};

/** @deprecated Use `getBurnAssetV0InstructionDataSerializer()` without any argument instead. */
export function getBurnAssetV0InstructionDataSerializer(
  _context: object
): Serializer<BurnAssetV0InstructionDataArgs, BurnAssetV0InstructionData>;
export function getBurnAssetV0InstructionDataSerializer(): Serializer<
  BurnAssetV0InstructionDataArgs,
  BurnAssetV0InstructionData
>;
export function getBurnAssetV0InstructionDataSerializer(
  _context: object = {}
): Serializer<BurnAssetV0InstructionDataArgs, BurnAssetV0InstructionData> {
  return mapSerializer<
    BurnAssetV0InstructionDataArgs,
    any,
    BurnAssetV0InstructionData
  >(
    struct<BurnAssetV0InstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['root', bytes({ size: 32 })],
        ['dataHash', bytes({ size: 32 })],
        ['creatorHash', bytes({ size: 32 })],
        ['leafIndex', u32()],
        ['namespace', string()],
        ['identifier', string()],
      ],
      { description: 'BurnAssetV0InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [86, 246, 51, 219, 1, 37, 165, 154],
    })
  ) as Serializer<BurnAssetV0InstructionDataArgs, BurnAssetV0InstructionData>;
}

// Extra Args.
export type BurnAssetV0InstructionExtraArgs = { proof: Array<PublicKey> };

// Args.
export type BurnAssetV0InstructionArgs = PickPartial<
  BurnAssetV0InstructionDataArgs & BurnAssetV0InstructionExtraArgs,
  'proof'
>;

// Instruction.
export function burnAssetV0(
  context: Pick<Context, 'programs' | 'eddsa' | 'identity'>,
  input: BurnAssetV0InstructionAccounts & BurnAssetV0InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'passport',
    'upUcvW7nF6ymrAFKborbq3vrbdpuokAvJheqHX5Qxtd'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    merkleTree: [input.merkleTree, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, true] as const)
      : ([context.identity, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'link',
    input.link
      ? ([input.link, false] as const)
      : ([
          findLinkPda(context, {
            namespace: input.namespace,
            identifier: input.identifier,
          }),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'treeAuthority',
    input.treeAuthority
      ? ([input.treeAuthority, true] as const)
      : ([
          findTreeConfigPda(context, {
            merkleTree: publicKey(input.merkleTree, false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'bubblegumSigner',
    input.bubblegumSigner
      ? ([input.bubblegumSigner, false] as const)
      : ([
          publicKey('4ewWZC5gT6TGpm5LZNDs9wVonfUT2q5PP5sc9kVbwMAK'),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'bubblegumProgram',
    input.bubblegumProgram
      ? ([input.bubblegumProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'bubblegumProgram',
            'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'logWrapper',
    input.logWrapper
      ? ([input.logWrapper, false] as const)
      : ([
          context.programs.getPublicKey(
            'splNoop',
            'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'compressionProgram',
    input.compressionProgram
      ? ([input.compressionProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splAccountCompression',
            'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  addObjectProperty(resolvingArgs, 'proof', input.proof ?? []);
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.authority, false);
  addAccountMeta(keys, signers, resolvedAccounts.link, false);
  addAccountMeta(keys, signers, resolvedAccounts.treeAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.merkleTree, false);
  addAccountMeta(keys, signers, resolvedAccounts.bubblegumSigner, false);
  addAccountMeta(keys, signers, resolvedAccounts.bubblegumProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.logWrapper, false);
  addAccountMeta(keys, signers, resolvedAccounts.compressionProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);

  // Remaining Accounts.
  const remainingAccounts = resolvedArgs.proof.map(
    (address) => [address, false] as const
  );
  remainingAccounts.forEach((remainingAccount) =>
    addAccountMeta(keys, signers, remainingAccount, false)
  );

  // Data.
  const data =
    getBurnAssetV0InstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}

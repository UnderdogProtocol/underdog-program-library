/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findAdminPda, findDomainPda } from '../accounts';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type InitializeDomainV0InstructionAccounts = {
  authority?: Signer;
  admin?: PublicKey | Pda;
  domainAuthority: PublicKey | Pda;
  domain?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  rent?: PublicKey | Pda;
};

// Data.
export type InitializeDomainV0InstructionData = {
  discriminator: Array<number>;
  namespace: string;
};

export type InitializeDomainV0InstructionDataArgs = { namespace: string };

/** @deprecated Use `getInitializeDomainV0InstructionDataSerializer()` without any argument instead. */
export function getInitializeDomainV0InstructionDataSerializer(
  _context: object
): Serializer<
  InitializeDomainV0InstructionDataArgs,
  InitializeDomainV0InstructionData
>;
export function getInitializeDomainV0InstructionDataSerializer(): Serializer<
  InitializeDomainV0InstructionDataArgs,
  InitializeDomainV0InstructionData
>;
export function getInitializeDomainV0InstructionDataSerializer(
  _context: object = {}
): Serializer<
  InitializeDomainV0InstructionDataArgs,
  InitializeDomainV0InstructionData
> {
  return mapSerializer<
    InitializeDomainV0InstructionDataArgs,
    any,
    InitializeDomainV0InstructionData
  >(
    struct<InitializeDomainV0InstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['namespace', string()],
      ],
      { description: 'InitializeDomainV0InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [62, 118, 17, 182, 235, 194, 146, 155],
    })
  ) as Serializer<
    InitializeDomainV0InstructionDataArgs,
    InitializeDomainV0InstructionData
  >;
}

// Args.
export type InitializeDomainV0InstructionArgs =
  InitializeDomainV0InstructionDataArgs;

// Instruction.
export function initializeDomainV0(
  context: Pick<Context, 'programs' | 'eddsa' | 'identity'>,
  input: InitializeDomainV0InstructionAccounts &
    InitializeDomainV0InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'passport',
    'upUcvW7nF6ymrAFKborbq3vrbdpuokAvJheqHX5Qxtd'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    domainAuthority: [input.domainAuthority, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, true] as const)
      : ([context.identity, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'admin',
    input.admin
      ? ([input.admin, true] as const)
      : ([findAdminPda(context), true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'domain',
    input.domain
      ? ([input.domain, true] as const)
      : ([
          findDomainPda(context, { namespace: input.namespace }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'rent',
    input.rent
      ? ([input.rent, false] as const)
      : ([
          publicKey('SysvarRent111111111111111111111111111111111'),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.authority, false);
  addAccountMeta(keys, signers, resolvedAccounts.admin, false);
  addAccountMeta(keys, signers, resolvedAccounts.domainAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.domain, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.rent, false);

  // Data.
  const data =
    getInitializeDomainV0InstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findAdminPda } from '../accounts';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type InitializeAdminInstructionAccounts = {
  authority?: Signer;
  admin?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type InitializeAdminInstructionData = { discriminator: Array<number> };

export type InitializeAdminInstructionDataArgs = {};

/** @deprecated Use `getInitializeAdminInstructionDataSerializer()` without any argument instead. */
export function getInitializeAdminInstructionDataSerializer(
  _context: object
): Serializer<
  InitializeAdminInstructionDataArgs,
  InitializeAdminInstructionData
>;
export function getInitializeAdminInstructionDataSerializer(): Serializer<
  InitializeAdminInstructionDataArgs,
  InitializeAdminInstructionData
>;
export function getInitializeAdminInstructionDataSerializer(
  _context: object = {}
): Serializer<
  InitializeAdminInstructionDataArgs,
  InitializeAdminInstructionData
> {
  return mapSerializer<
    InitializeAdminInstructionDataArgs,
    any,
    InitializeAdminInstructionData
  >(
    struct<InitializeAdminInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'InitializeAdminInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [35, 176, 8, 143, 42, 160, 61, 158],
    })
  ) as Serializer<
    InitializeAdminInstructionDataArgs,
    InitializeAdminInstructionData
  >;
}

// Instruction.
export function initializeAdmin(
  context: Pick<Context, 'programs' | 'eddsa' | 'identity'>,
  input: InitializeAdminInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'passport',
    'upUcvW7nF6ymrAFKborbq3vrbdpuokAvJheqHX5Qxtd'
  );

  // Resolved inputs.
  const resolvedAccounts = {};
  addObjectProperty(
    resolvedAccounts,
    'authority',
    input.authority
      ? ([input.authority, true] as const)
      : ([context.identity, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'admin',
    input.admin
      ? ([input.admin, true] as const)
      : ([findAdminPda(context), true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );

  addAccountMeta(keys, signers, resolvedAccounts.authority, false);
  addAccountMeta(keys, signers, resolvedAccounts.admin, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);

  // Data.
  const data = getInitializeAdminInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type Admin = Account<AdminAccountData>;

export type AdminAccountData = {
  discriminator: Array<number>;
  bump: number;
  address: PublicKey;
};

export type AdminAccountDataArgs = { bump: number; address: PublicKey };

/** @deprecated Use `getAdminAccountDataSerializer()` without any argument instead. */
export function getAdminAccountDataSerializer(
  _context: object
): Serializer<AdminAccountDataArgs, AdminAccountData>;
export function getAdminAccountDataSerializer(): Serializer<
  AdminAccountDataArgs,
  AdminAccountData
>;
export function getAdminAccountDataSerializer(
  _context: object = {}
): Serializer<AdminAccountDataArgs, AdminAccountData> {
  return mapSerializer<AdminAccountDataArgs, any, AdminAccountData>(
    struct<AdminAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['bump', u8()],
        ['address', publicKeySerializer()],
      ],
      { description: 'AdminAccountData' }
    ),
    (value) => ({ ...value, discriminator: [244, 158, 220, 65, 8, 73, 4, 65] })
  ) as Serializer<AdminAccountDataArgs, AdminAccountData>;
}

/** @deprecated Use `deserializeAdmin(rawAccount)` without any context instead. */
export function deserializeAdmin(
  context: object,
  rawAccount: RpcAccount
): Admin;
export function deserializeAdmin(rawAccount: RpcAccount): Admin;
export function deserializeAdmin(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): Admin {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getAdminAccountDataSerializer()
  );
}

export async function fetchAdmin(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Admin> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Admin');
  return deserializeAdmin(maybeAccount);
}

export async function safeFetchAdmin(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Admin | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeAdmin(maybeAccount) : null;
}

export async function fetchAllAdmin(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Admin[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Admin');
    return deserializeAdmin(maybeAccount);
  });
}

export async function safeFetchAllAdmin(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Admin[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeAdmin(maybeAccount as RpcAccount));
}

export function getAdminGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey(
    'passport',
    'upUcvW7nF6ymrAFKborbq3vrbdpuokAvJheqHX5Qxtd'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      bump: number;
      address: PublicKey;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      bump: [8, u8()],
      address: [9, publicKeySerializer()],
    })
    .deserializeUsing<Admin>((account) => deserializeAdmin(account))
    .whereField('discriminator', [244, 158, 220, 65, 8, 73, 4, 65]);
}

export function getAdminSize(): number {
  return 41;
}

export function findAdminPda(
  context: Pick<Context, 'eddsa' | 'programs'>
): Pda {
  const programId = context.programs.getPublicKey(
    'passport',
    'upUcvW7nF6ymrAFKborbq3vrbdpuokAvJheqHX5Qxtd'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('underdog_identity_admin'),
  ]);
}

export async function fetchAdminFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  options?: RpcGetAccountOptions
): Promise<Admin> {
  return fetchAdmin(context, findAdminPda(context), options);
}

export async function safeFetchAdminFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  options?: RpcGetAccountOptions
): Promise<Admin | null> {
  return safeFetchAdmin(context, findAdminPda(context), options);
}

/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type Domain = Account<DomainAccountData>;

export type DomainAccountData = {
  discriminator: Array<number>;
  authority: PublicKey;
  expiration: bigint;
  bump: number;
};

export type DomainAccountDataArgs = {
  authority: PublicKey;
  expiration: number | bigint;
  bump: number;
};

/** @deprecated Use `getDomainAccountDataSerializer()` without any argument instead. */
export function getDomainAccountDataSerializer(
  _context: object
): Serializer<DomainAccountDataArgs, DomainAccountData>;
export function getDomainAccountDataSerializer(): Serializer<
  DomainAccountDataArgs,
  DomainAccountData
>;
export function getDomainAccountDataSerializer(
  _context: object = {}
): Serializer<DomainAccountDataArgs, DomainAccountData> {
  return mapSerializer<DomainAccountDataArgs, any, DomainAccountData>(
    struct<DomainAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['authority', publicKeySerializer()],
        ['expiration', u64()],
        ['bump', u8()],
      ],
      { description: 'DomainAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [167, 191, 231, 63, 146, 41, 115, 27],
    })
  ) as Serializer<DomainAccountDataArgs, DomainAccountData>;
}

/** @deprecated Use `deserializeDomain(rawAccount)` without any context instead. */
export function deserializeDomain(
  context: object,
  rawAccount: RpcAccount
): Domain;
export function deserializeDomain(rawAccount: RpcAccount): Domain;
export function deserializeDomain(
  context: RpcAccount | object,
  rawAccount?: RpcAccount
): Domain {
  return deserializeAccount(
    rawAccount ?? (context as RpcAccount),
    getDomainAccountDataSerializer()
  );
}

export async function fetchDomain(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Domain> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Domain');
  return deserializeDomain(maybeAccount);
}

export async function safeFetchDomain(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Domain | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeDomain(maybeAccount) : null;
}

export async function fetchAllDomain(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Domain[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Domain');
    return deserializeDomain(maybeAccount);
  });
}

export async function safeFetchAllDomain(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Domain[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeDomain(maybeAccount as RpcAccount));
}

export function getDomainGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'underdogIdentity',
    'upUcvW7nF6ymrAFKborbq3vrbdpuokAvJheqHX5Qxtd'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      authority: PublicKey;
      expiration: number | bigint;
      bump: number;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      authority: [8, publicKeySerializer()],
      expiration: [40, u64()],
      bump: [48, u8()],
    })
    .deserializeUsing<Domain>((account) => deserializeDomain(account))
    .whereField('discriminator', [167, 191, 231, 63, 146, 41, 115, 27]);
}

export function getDomainSize(): number {
  return 49;
}

export function findDomainPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    namespace: string;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'underdogIdentity',
    'upUcvW7nF6ymrAFKborbq3vrbdpuokAvJheqHX5Qxtd'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize(seeds.namespace),
  ]);
}

export async function fetchDomainFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findDomainPda>[1],
  options?: RpcGetAccountOptions
): Promise<Domain> {
  return fetchDomain(context, findDomainPda(context, seeds), options);
}

export async function safeFetchDomainFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findDomainPda>[1],
  options?: RpcGetAccountOptions
): Promise<Domain | null> {
  return safeFetchDomain(context, findDomainPda(context, seeds), options);
}

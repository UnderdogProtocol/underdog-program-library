/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findDomainPda, findLinkPda } from '../accounts';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type ActivatePassportV0InstructionAccounts = {
  domainAuthority: Signer;
  domain?: PublicKey | Pda;
  passportAuthority: Signer;
  passport?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  rent?: PublicKey | Pda;
};

// Data.
export type ActivatePassportV0InstructionData = {
  discriminator: Array<number>;
  namespace: string;
  identifier: string;
};

export type ActivatePassportV0InstructionDataArgs = {
  namespace: string;
  identifier: string;
};

/** @deprecated Use `getActivatePassportV0InstructionDataSerializer()` without any argument instead. */
export function getActivatePassportV0InstructionDataSerializer(
  _context: object
): Serializer<
  ActivatePassportV0InstructionDataArgs,
  ActivatePassportV0InstructionData
>;
export function getActivatePassportV0InstructionDataSerializer(): Serializer<
  ActivatePassportV0InstructionDataArgs,
  ActivatePassportV0InstructionData
>;
export function getActivatePassportV0InstructionDataSerializer(
  _context: object = {}
): Serializer<
  ActivatePassportV0InstructionDataArgs,
  ActivatePassportV0InstructionData
> {
  return mapSerializer<
    ActivatePassportV0InstructionDataArgs,
    any,
    ActivatePassportV0InstructionData
  >(
    struct<ActivatePassportV0InstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['namespace', string()],
        ['identifier', string()],
      ],
      { description: 'ActivatePassportV0InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [8, 207, 186, 160, 188, 53, 213, 164],
    })
  ) as Serializer<
    ActivatePassportV0InstructionDataArgs,
    ActivatePassportV0InstructionData
  >;
}

// Args.
export type ActivatePassportV0InstructionArgs =
  ActivatePassportV0InstructionDataArgs;

// Instruction.
export function activatePassportV0(
  context: Pick<Context, 'programs' | 'eddsa'>,
  input: ActivatePassportV0InstructionAccounts &
    ActivatePassportV0InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'underdogIdentity',
    'upUcvW7nF6ymrAFKborbq3vrbdpuokAvJheqHX5Qxtd'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    domainAuthority: [input.domainAuthority, true] as const,
    passportAuthority: [input.passportAuthority, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'domain',
    input.domain
      ? ([input.domain, false] as const)
      : ([
          findDomainPda(context, { namespace: input.namespace }),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'passport',
    input.passport
      ? ([input.passport, true] as const)
      : ([
          findLinkPda(context, {
            namespace: input.namespace,
            identifier: input.identifier,
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'rent',
    input.rent
      ? ([input.rent, false] as const)
      : ([
          publicKey('SysvarRent111111111111111111111111111111111'),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.domainAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.domain, false);
  addAccountMeta(keys, signers, resolvedAccounts.passportAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.passport, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.rent, false);

  // Data.
  const data =
    getActivatePassportV0InstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
